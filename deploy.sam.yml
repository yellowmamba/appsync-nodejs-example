AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sample AWS Appsync SAM template'
Transform: AWS::Serverless-2016-10-31

Parameters:

  APIName:
    Type: String
    Default: aws_sample_todo

Resources:

  ToDoDescriptionLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: nodejs8.10
      Handler: index.handler
      FunctionName: !Sub ${APIName}-description-lambda

  ToDoDescriptionLambda2:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: nodejs8.10
      Handler: index.handler2
      FunctionName: !Sub ${APIName}-description-lambda-2

  TodoGraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: "Sample AWS Todo API"
      AuthenticationType: AWS_IAM
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncServiceRole.Arn
        FieldLogLevel: "ALL"

  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${APIName}-user-pool
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      LambdaConfig:
        PostAuthentication: !GetAtt MyPostCognitoAuthFunc.Arn

  MyPostCognitoAuthFunc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.postCognitoAuth
      Role: !GetAtt MyCognitoLambdaRole.Arn
      Runtime: nodejs8.10
      CodeUri: ./index.js

  MyCognitoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-cognito-postauth
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  MyCognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Sub ${APIName}-app-client
      GenerateSecret: false

  MyCognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-cognito-auth
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": "authenticated"

  MyCognitoUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-cognito-unauth
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": "unauthenticated"

  MyCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: "My Todo app identity pool"
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref MyCognitoAppClient
          ProviderName: !GetAtt MyCognitoUserPool.ProviderName

  MyCognitoIdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref MyCognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt MyCognitoUnauthRole.Arn
        authenticated: !GetAtt MyCognitoAuthRole.Arn

  MyCognitoAuthRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${APIName}-cognito-auth-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource:
              - !Sub ${TodoGraphQLApi}/types/Mutation/fields/*
      Roles:
        - !Ref MyCognitoAuthRole

  MyCognitoUnauthRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${APIName}-cognito-unauth-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - appsync:GraphQL
            Resource:
              - !Sub ${TodoGraphQLApi}/*
      Roles:
        - !Ref MyCognitoUnauthRole

  TodoAppSyncSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      DefinitionS3Location: ./schema.graphql

  AppSyncServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${APIName}-appsync-cwlogs-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  TodoDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${APIName}-table
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  TodoCommentDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub ${APIName}-comment-table
      AttributeDefinitions:
        - AttributeName: "todoId"
          AttributeType: "S"
        - AttributeName: "commentId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "todoId"
          KeyType: "HASH"
        - AttributeName: "commentId"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST


  DynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-appsync-dynamodb-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${APIName}-appsync-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "appsync.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  AppSyncDynamoDBPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: "Managed policy to allow Appsync to access the Dynamodb table"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource:
              - !Join
                - ""
                - - !GetAtt TodoDynamoDBTable.Arn 
                  - "*"
              - !Join
                - ""
                - - !GetAtt TodoCommentDynamoDBTable.Arn
                  - "*"

  AppSyncTodoDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      Name: !Sub ${APIName}_todo_table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: !Sub ${AWS::Region}
        TableName: !Ref TodoDynamoDBTable

  AppSyncTodoCommentDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      Name: !Sub ${APIName}_todo_comment_table
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DynamoDBRole.Arn
      DynamoDBConfig:
        AwsRegion: !Sub ${AWS::Region}
        TableName: !Ref TodoCommentDynamoDBTable

  AppSyncTodoDescriptionFuncOneDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      Name: !Sub ${APIName}_todo_desc_lambda_1
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt LambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ToDoDescriptionLambda.Arn

  AppSyncTodoDescriptionFuncTwoDataSource:
    Type: "AWS::AppSync::DataSource"
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      Name: !Sub ${APIName}_todo_desc_lambda_2
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt LambdaRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt ToDoDescriptionLambda2.Arn

  AppSyncGetTodosResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: TodoAppSyncSchema
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      FieldName: getTodos
      TypeName: Query
      DataSourceName: !GetAtt AppSyncTodoDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Scan",
          "limit": $util.defaultIfNull(${ctx.args.limit}, 2),
          "nextToken": $util.toJson(${ctx.args.nextToken})
        }
      ResponseMappingTemplate: |
        {
          "todos": $util.toJson($ctx.result.items),
          "nextToken": $util.toJson(${ctx.result.nextToken})
        }

  AppSyncGetTodoByIdResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: TodoAppSyncSchema
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      FieldName: getTodoById
      TypeName: Query
      DataSourceName: !GetAtt AppSyncTodoDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "GetItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson(${ctx.args.id})
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  AppSyncGetTodoCommentsResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: TodoAppSyncSchema
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      FieldName: comments
      TypeName: Todo
      DataSourceName: !GetAtt AppSyncTodoCommentDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "#todoId = :todoId",
            "expressionNames": {
              "#todoId": "todoId"
            },
            "expressionValues": {
              ":todoId": $util.dynamodb.toDynamoDBJson(${ctx.source.id})
            }
          },
        }
      ResponseMappingTemplate: $util.toJson($context.result.items)

  AppSyncTodoDescriptionResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: TodoAppSyncSchema
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      FieldName: description
      TypeName: Todo
      Kind: PIPELINE
      RequestMappingTemplate: |
        #set($payload = {"todoId": $ctx.source.id})
        $util.toJson($payload)
      ResponseMappingTemplate: $utils.toJson($context.result)
      PipelineConfig:
        Functions:
          - !GetAtt AppSyncTodoDescriptionFunctionOne.FunctionId
          - !GetAtt AppSyncTodoDescriptionFunctionTwo.FunctionId

  AppSyncTodoDescriptionFunctionOne:
    Type: "AWS::AppSync::FunctionConfiguration"
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      DataSourceName: !GetAtt AppSyncTodoDescriptionFuncOneDataSource.Name
      Name: !Sub ${APIName}_desc_func_1
      FunctionVersion: "2018-05-29"
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "data": $util.toJson($ctx.prev.result)
          }
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  AppSyncTodoDescriptionFunctionTwo:
    Type: "AWS::AppSync::FunctionConfiguration"
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      DataSourceName: !GetAtt AppSyncTodoDescriptionFuncTwoDataSource.Name
      Name: !Sub ${APIName}_desc_func_2
      FunctionVersion: "2018-05-29"
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "description": $util.toJson($ctx.prev.result)
          }
        }
      ResponseMappingTemplate: $util.toJson($ctx.result)

  AppSyncGetCommentsByTodoIdResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: TodoAppSyncSchema
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      FieldName: getCommentsByTodoId
      TypeName: Query
      DataSourceName: !GetAtt AppSyncTodoCommentDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Query",
          "query": {
            "expression": "#todoId = :todoId",
            "expressionNames": {
              "#todoId": "todoId"
            },
            "expressionValues": {
              ":todoId": $util.dynamodb.toDynamoDBJson(${ctx.args.todoId})
            }
          },
          "nextToken": $util.toJson(${ctx.args.nextToken}),
          "limit": $util.defaultIfNull(${ctx.args.limit}, 2),
        }
      ResponseMappingTemplate: $util.toJson($context.result.items)

  AppSyncAddTodoResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: TodoAppSyncSchema
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      FieldName: addTodo
      TypeName: Mutation
      DataSourceName: !GetAtt AppSyncTodoDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "id": $util.dynamodb.toDynamoDBJson($ctx.args.id),
          },
          "attributeValues": {
            "name": $util.dynamodb.toDynamoDBJson($ctx.args.name),
            "description": $util.dynamodb.toDynamoDBJson($ctx.args.description),
            "priority": $util.dynamodb.toDynamoDBJson($ctx.args.priority),
            "status": $util.dynamodb.toDynamoDBJson($ctx.args.status)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

  AppSyncAddCommentResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: TodoAppSyncSchema
    Properties:
      ApiId: !GetAtt TodoGraphQLApi.ApiId
      FieldName: addComment
      TypeName: Mutation
      DataSourceName: !GetAtt AppSyncTodoCommentDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "PutItem",
          "key": {
            "todoId": $util.dynamodb.toDynamoDBJson($ctx.args.todoId),
            "commentId": $util.dynamodb.toDynamoDBJson($utils.autoId()),
          },
          "attributeValues": {
            "content": $util.dynamodb.toDynamoDBJson($ctx.args.content)
          }
        }
      ResponseMappingTemplate: "$util.toJson($ctx.result)"

Outputs:
  TodoGraphQLApiId:
    Description: API ID of the Todo Appsync API
    Value: !GetAtt TodoGraphQLApi.ApiId
    Export:
      Name: !Sub "${AWS::StackName}-TodoGraphQLApiId"
  GraphQLApiUrl:
    Description: The Endpoint URL of Todo GraphQL API.
    Value: !GetAtt TodoGraphQLApi.GraphQLUrl
    Export:
      Name: !Sub "${AWS::StackName}-TicketsGraphQLApiUrl"
  DynamoDBTodoTableName:
    Description: The Dynamodb todo table name
    Value: !Ref TodoDynamoDBTable
    Export:
      Name: !Sub "${AWS::StackName}-DynamoDBTable"